; -*- Lisp -*-
(load "lib.unls")
(load "churchnum.unls")

(defsyntax (defword num)
  (receive (m n)
           (quotient&remainder num 1000)
     `(cons (lambda (f0 f1 f2 f3)
              ,(string->symbol (string-append "f" (number->string m))))
            ,(string->symbol (string-append "c" (number->string n))))))

(defmacro (word? word) (word (lambda (_ _) I)))
(defmacro (motion? word) ((car word) I V V V))
(defmacro (noun? word) ((car word) V I V V))
(defmacro (verb? word) ((car word) V V I V))
(defmacro (special-word? word) ((car word) V V V I))
(defmacro (word-id-of word) (cdr word))

(load "parser.g.unls")

(defrecmacro parse-lineend
  (lambda (q)
    (K parse-lineend
       (((?space I) q space-id)
        ((?newline I) q newline-id)))))

(defmacro skip-spaces
  ((call/cc I)
   (call/cc (?space I @ I))))

(defmacro skip-until-newline
  ((call/cc I)
   (call/cc ((call/cc
              (lambda (q)
                (K I (?newline I q V))))
             @ I))))

(defmacro (word-data wordtbl word)
  (car ((word-id-of word) cdr (wordtbl (car word)))))

(defmacro def-motion-table V)
(defmacro def-noun-table V)
(defmacro def-verb-table V)
(defmacro def-special-word-table
  (list V  ; 0
        V  ; 1
        V  ; 2
        V  ; 3
        V  ; 4
        V  ; 5
        V  ; 6
        V  ; 7
        V  ; 8
        V  ; 9
        V  ; 10
        V  ; 11
        V  ; 12
        V  ; 13
        V  ; 14
        V  ; 15
        V  ; 16
        V  ; 17
        V  ; 18
        V  ; 19
        V  ; 20
        V  ; 21
        V  ; 22
        V  ; 23
        V  ; 24
        V  ; 25
        V  ; 26
        V  ; 27
        V  ; 28
        V  ; 29
        V  ; 30
        V  ; 31
        V  ; 32
        V  ; 33
        V  ; 34
        V  ; 35
        V  ; 36
        V  ; 37
        V  ; 38
        V  ; 39
        V  ; 40
        V  ; 41
        V  ; 42
        V  ; 43
        V  ; 44
        V  ; 45
        V  ; 46
        V  ; 47
        V  ; 48
        V  ; 49
        (string "GOOD TRY, BUT THAT IS AN OLD WORN-OUT MAGIC WORD.\n")  ; 50
        (string "help-string\n")  ; 51
        V  ; 52
        V  ; 53
        V  ; 54
        V  ; 55
        V  ; 56
        V  ; 57
        V  ; 58
        V  ; 59
        V  ; 60
        V  ; 61
        V  ; 62
        V  ; 63
        (string "tree-string\n")  ; 64
        V  ; 65
        (string "DDIGGING WITHOUT A SHOVEL IS QUITE IMPRACTICAL.  EVEN WITH A SHOVEL\nPROGRESS IS UNLIKELY.\n")  ; 66
        V  ; 67
        (string "I'M AS CONFUSED AS YOU ARE.\n")  ; 68
        (string "MIST IS A WHITE VAPOR, USUALLY WATER, SEEN FROM TIME TO TIME IN\nCAVERNS.  IT CAN BE FOUND ANYWHERE BUT IS FREQUENTLY A SIGN OF A DEEP\nPIT LEADING DOWN TO WATER.\n")  ; 69
        V  ; 70
        V  ; 71
        V  ; 72
        V  ; 73
        V  ; 74
        V  ; 75
        V  ; 76
        V  ; 77
        V  ; 78
        (string "WATCH IT!\n")  ; 79
        V  ; 80
        V  ; 81
        V  ; 82
        V  ; 83
        V  ; 84
        V  ; 85
        V  ; 86
        V  ; 87
        V  ; 88
        V  ; 89
        V  ; 90
        V  ; 91
        V  ; 92
        V  ; 93
        V  ; 94
        V  ; 95
        V  ; 96
        V  ; 97
        V  ; 98
        V  ; 99
        V  ; 100
        V  ; 101
        V  ; 102
        V  ; 103
        V  ; 104
        V  ; 105
        V  ; 106
        V  ; 107
        V  ; 108
        V  ; 109
        V  ; 110
        V  ; 111
        V  ; 112
        V  ; 113
        V  ; 114
        V  ; 115
        V  ; 116
        V  ; 117
        V  ; 118
        V  ; 119
        V  ; 120
        V  ; 121
        V  ; 122
        V  ; 123
        V  ; 124
        V  ; 125
        V  ; 126
        V  ; 127
        V  ; 128
        V  ; 129
        V  ; 130
        V  ; 131
        V  ; 132
        V  ; 133
        V  ; 134
        V  ; 135
        V  ; 136
        V  ; 137
        V  ; 138
        (string "I DON'T KNOW THE WORD \"STOP\".  USE \"QUIT\" IF YOU WANT TO GIVE UP.\n")  ; 139
        V  ; 140
        V  ; 141
        (string "info-string\n")  ; 142
        V  ; 143
        V  ; 144
        V  ; 145
        V  ; 146
        (string "I DON'T KNOW HOW.\n")  ; 147
        ))

(defmacro def-word-table
  (lambda (f)
    (f def-motion-table
       def-noun-table
       def-verb-table
       def-special-word-table)))

(defmacro getin
  ((lambda (parser)
     (call/cc
      (lambda (return)
        ((@ I)
         skip-spaces
         ((?newline I) return V)  ; empty input
         (let ((word1 (call/cc parser)))
           (if (word? word1)
               (skip-spaces
                ((?newline I) return (cons word1 V))
                (let ((word2 (call/cc parser)))
                  (if (word? word2)
                      (skip-spaces
                       ((?newline I) return (cons word1 word2))
                       (skip-until-newline)
                       (return (print$ "Please stick to 1- and 2-word commands.\n" V)))  ; more than 2 words
                    ((skip-until-newline) (return (cons V V))))))  ; unknown word
             ((skip-until-newline) (return (cons V V)))))))))  ; unknown word
   generated-parser))

(defmacro getin-loop
  (call/cc
   (lambda (return)
     ((lambda (x) (x x))
      (lambda (rec)
        ((#\> I)
         (let ((words getin))
           (((words (lambda (hd tl) I)) return words)
            (rec rec)))))))))

(defmacro main
  (call/cc
   (lambda (q)
     ((getin-loop
      (lambda (w1 w2)
        ((print-digit (word-id-of w1) I)
         (#\space I)
         (if (word? w2)
             (print-digit (word-id-of w2) I)
           ((string "none") I))
         (q I))))
      ((string "what?") I)))))

;main
